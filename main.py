#!/usr/bin/env python3
import os
import socket
import sys
import shlex
from services.scanner import NmapTarayici
from services.port_checker import PortChecker
from services.ftp import FTPBruteForce
from services.ssh import SSHBruteForce
from services.http import HTTPBruteForce
from services.https import HTTPSBruteForce
from services.mysql import MySQLBruteForce
from services.postgresql import PostgreSQLBruteForce
from services.smtp import SMTPBruteForce
from services.pop3 import POP3BruteForce
from services.imap import IMAPBruteForce
from services.rdp import RDPBruteForce
from services.smb import SMBBruteForce
from services.telnet import TelnetBruteForce
from services.vnc import VNCBruteForce
from services.mssql import MSSQLBruteForce
from services.mongodb import MongoDBBruteForce
from utils.raporlayici import Raporlayici
from config import Ayarlar

def giris_ekrani():
    print("=" * 60)
    print("GELÄ°ÅžMÄ°Åž BRUTE-FORCE SALDIRI ARACI".center(60))
    print("=" * 60)
    print(f"Versiyon: 4.0 | Parametrik GiriÅŸ | Port Check | Console Output\n")
    print("ðŸ’¡ Ä°pucu: YardÄ±m iÃ§in --help yazabilirsiniz!")
    print("ðŸ’¡ SÃ¶z dizimi: [parametreler] <host>")
    print("ðŸ’¡ Ã–rnekler:")
    print("   -h 192.168.1.1                    (tÃ¼m servislere saldÄ±rÄ±)")
    print("   -s ssh -t 8 192.168.1.1           (SSH, 8 thread)")
    print("   -s ftp -L users.txt -P pass.txt 192.168.1.1")
    print("   -s http -V -f 192.168.1.1         (HTTP, verbose, first found)")
    print("   -s ssh -l admin -p pass 192.168.1.1")
    print("   -n 192.168.1.1                     (nmap taramasÄ±)")
    print("=" * 60)


def yazdir_yardim():
    print("\n" + "="*60)
    print("KULLANIM YARDIMI".center(60))
    print("="*60)
    print("SÃ¶z dizimi: python main.py [parametreler] <host>")
    print("Ã–rnekler:")
    print("  python main.py -h 192.168.1.1")
    print("  python main.py -s ssh -t 8 192.168.1.1")
    print("  python main.py -nmap 192.168.1.1")
    print("\nParametreler:")
    print("  --help, -? , help: Bu yardÄ±m mesajÄ±nÄ± gÃ¶sterir")
    print("  -h: TÃ¼m servislere saldÄ±rÄ± (port check ile aÃ§Ä±k olanlara)")
    print("  -s [servis]: Belirli servise saldÄ±r (Ã¶r: -s ssh) [port check YAPMAZ]")
    print("  -nmap: Nmap taramasÄ±")
    print("\nHydra Parametreleri (opsiyonel):")
    print("  -L [dosya], -P [dosya], -l [kullanÄ±cÄ±], -p [ÅŸifre], -t [sayÄ±], -W [sn]")
    print("  -V, -d, -f, -R, -o [dosya], -b [dosya], -x, -F [form], -C [dosya]")
    print("\nNotlar:")
    print("  - Host (IP/Hostname) en sonda verilir.")
    print("  - Nmap haricindeki tÃ¼m modlarda port check yapÄ±lÄ±r, kapalÄ± portlar atlanÄ±r.")
    print("  - -s ile servis verilirse port check atlanÄ±r ve doÄŸrudan saldÄ±rÄ± baÅŸlar.")
    print("="*60)

def gecerli_ip_girisi(ip):
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

def parametrik_giris_kontrol(giris):
    """Parametrik giriÅŸleri kontrol eder ve iÅŸler"""
    giris = giris.strip()
    
    # YardÄ±m parametresi
    if giris.lower() in ['-h', '--help', 'help', 'yardÄ±m', '-?', '?']:
        print("\n" + "="*60)
        print("PARAMETRÄ°K GÄ°RÄ°Åž YARDIMI".center(60))
        print("="*60)
        print("KullanÄ±m Ã¶rnekleri:")
        print("  IP Adresi: 192.168.1.1")
        print("  IP AralÄ±ÄŸÄ±: 192.168.1.1-10")
        print("  CIDR Notasyonu: 192.168.1.0/24")
        print("  Hostname: example.com")
        print("\nParametrik KullanÄ±m:")
        print("  -h: TÃ¼m servislere saldÄ±rÄ±")
        print("  -s [servis]: Belirli servis (Ã¶rn: -s ssh)")
        print("  -n: Nmap taramasÄ±")
        print("\nHydra Parametreleri:")
        print("  -L [dosya]: KullanÄ±cÄ± listesi dosyasÄ±")
        print("  -P [dosya]: Åžifre listesi dosyasÄ±")
        print("  -l [kullanÄ±cÄ±]: Tek kullanÄ±cÄ±")
        print("  -p [ÅŸifre]: Tek ÅŸifre")
        print("  -t [sayÄ±]: Thread sayÄ±sÄ±")
        print("  -W [saniye]: Timeout")
        print("  -s [port]: Port numarasÄ±")
        print("  -V: Verbose mod")
        print("  -d: Debug mod")
        print("  -f: Ä°lk bulunanÄ± durdur")
        print("  -R: Restore session")
        print("  -o [dosya]: Ã‡Ä±ktÄ± dosyasÄ±")
        print("  -b [dosya]: Log dosyasÄ±")
        print("  -x: XML Ã§Ä±ktÄ±")
        print("  -F [parametreler]: Form parametreleri (HTTP iÃ§in)")
        print("  -C [dosya]: Ã–zel parametre dosyasÄ±")
        print("  -M [dosya]: ModÃ¼l dosyasÄ±")
        print("  -m [servis]: Servis adÄ±")
        print("\nKullanÄ±m:")
        print("  Sadece IP ve parametreleri yazÄ±n:")
        print("  192.168.1.1 -h")
        print("  192.168.1.1 -s ssh")
        print("  192.168.1.1 -n")
        print("  YardÄ±m: -h, --help, help, yardÄ±m")
        print("  Ã‡Ä±kÄ±ÅŸ: exit, quit, Ã§Ä±kÄ±ÅŸ")
        print("="*60)
        return None
    
    # Ã‡Ä±kÄ±ÅŸ parametresi
    if giris.lower() in ['exit', 'quit', 'Ã§Ä±kÄ±ÅŸ', 'q']:
        print("[!] Program sonlandÄ±rÄ±lÄ±yor...")
        exit(0)
    
    # IP aralÄ±ÄŸÄ± kontrolÃ¼ (Ã¶rn: 192.168.1.1-10)
    if '-' in giris and giris.count('.') == 3:
        try:
            base_ip, range_part = giris.rsplit('.', 1)
            start, end = range_part.split('-')
            base_ip = f"{base_ip}.{start}"
            if gecerli_ip_girisi(base_ip):
                return giris  # IP aralÄ±ÄŸÄ± geÃ§erli
        except:
            pass
    
    # CIDR notasyonu kontrolÃ¼ (Ã¶rn: 192.168.1.0/24)
    if '/' in giris:
        try:
            ip_part, cidr = giris.split('/')
            if gecerli_ip_girisi(ip_part) and 0 <= int(cidr) <= 32:
                return giris  # CIDR geÃ§erli
        except:
            pass
    
    # Tek IP kontrolÃ¼
    if gecerli_ip_girisi(giris):
        return giris
    
    # Hostname kontrolÃ¼ (basit)
    if '.' in giris and not giris.startswith('-'):
        return giris  # Hostname olarak kabul et
    
    return None

def hedef_ip_al():
    while True:
        giris = input("Hedef IP ve parametreleri girin (Ã¶rn: 192.168.1.1 -h): ").strip()
        
        # BirleÅŸik giriÅŸ desteÄŸi: "192.168.1.1 -h" gibi
        if ' ' in giris:
            try:
                tokens = shlex.split(giris)
            except Exception:
                tokens = giris.split()
            if len(tokens) >= 2:
                hedef, parametreler = tokens[0], tokens[1:]
                # Hedef geÃ§erli mi?
                if parametrik_giris_kontrol(hedef):
                    return (hedef, parametreler)
                else:
                    print("[!] GeÃ§ersiz hedef formatÄ±. Ã–rnek: 192.168.1.1, 192.168.1.0/24, example.com")
                    continue
        
        # Parametrik kontrol
        sonuc = parametrik_giris_kontrol(giris)
        if sonuc is None:
            continue  # YardÄ±m gÃ¶sterildi, tekrar sor
        elif sonuc:
            return sonuc
        
        print("[!] GeÃ§ersiz format! Ã–rnekler:")
        print("  - IP: 192.168.1.1")
        print("  - IP + Parametre: 192.168.1.1 -h")
        print("  - IP + Servis: 192.168.1.1 -s ssh")
        print("  - AralÄ±k: 192.168.1.1-10")
        print("  - CIDR: 192.168.1.0/24")
        print("  - Hostname: example.com")
        print("  - YardÄ±m: -h")

def port_check_ve_saldiri(hedef_ip, raporlayici):
    """Port check ile aÃ§Ä±k portlarÄ± bulup saldÄ±rÄ± yapar"""
    print(f"\n[+] {hedef_ip} iÃ§in port check baÅŸlatÄ±lÄ±yor...")
    
    port_checker = PortChecker(hedef_ip)
    acik_portlar = port_checker.servis_portlarini_tara()
    acik_servisler = port_checker.acik_servisleri_getir()
    
    if not acik_servisler:
        print("[-] AÃ§Ä±k servis bulunamadÄ±!")
        return
    
    print(f"\n[+] Bulunan aÃ§Ä±k servisler:")
    for servis, port in acik_servisler.items():
        print(f"  - {servis.upper()} (Port {port})")
    
    # Servis sÄ±nÄ±flarÄ± eÅŸleme
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    print(f"\n[+] Brute force saldÄ±rÄ±larÄ± baÅŸlatÄ±lÄ±yor...")
    for servis_adi, port in acik_servisler.items():
        if servis_adi in servis_esleme:
            try:
                saldiri = servis_esleme[servis_adi](hedef_ip, port)
                saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
            except Exception as e:
                print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                continue

def nmap_tarama_ve_saldiri(hedef_ip, raporlayici):
    """Nmap ile detaylÄ± tarama ve saldÄ±rÄ±"""
    try:
        print(f"\n[+] {hedef_ip} iÃ§in Nmap taramasÄ± baÅŸlatÄ±lÄ±yor...")
        
        tarayici = NmapTarayici(hedef_ip)
        acik_servisler = tarayici.detayli_tarama()
        
        if not acik_servisler:
            print("[-] AÃ§Ä±k port bulunamadÄ±")
            return
        
        print(f"\n[+] Bulunan Servisler:")
        for servis in acik_servisler:
            host = servis.get('host', hedef_ip)
            print(f"  - {host}:{servis['port']}/{servis['protokol']}: {servis['servis']} ({servis['versiyon']})")
        
        servis_esleme = {
            'ftp': FTPBruteForce,
            'ssh': SSHBruteForce,
            'http': HTTPBruteForce,
            'https': HTTPSBruteForce,
            'mysql': MySQLBruteForce,
            'postgresql': PostgreSQLBruteForce,
            'mongodb': MongoDBBruteForce,
            'smtp': SMTPBruteForce,
            'pop3': POP3BruteForce,
            'imap': IMAPBruteForce,
            'rdp': RDPBruteForce,
            'smb': SMBBruteForce,
            'telnet': TelnetBruteForce,
            'vnc': VNCBruteForce,
            'mssql': MSSQLBruteForce
        }
        
        print(f"\n[+] Brute force saldÄ±rÄ±larÄ± baÅŸlatÄ±lÄ±yor...")
        for servis in acik_servisler:
            servis_adi = servis['servis']
            host = servis.get('host', hedef_ip)
            if servis_adi in servis_esleme:
                try:
                    saldiri = servis_esleme[servis_adi](host, servis['port'])
                    saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
                except Exception as e:
                    print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                    continue
    except Exception as e:
        print(f"[!] Nmap tarama hatasÄ±: {str(e)}")
        raporlayici.rapor_ekle("NMAP", hedef_ip, "N/A", "HATA", str(e))

def tum_servislere_saldiri(hedef_ip, raporlayici):
    """TÃ¼m desteklenen servislere saldÄ±rÄ±"""
    print(f"\n[+] {hedef_ip} iÃ§in tÃ¼m servislere saldÄ±rÄ± baÅŸlatÄ±lÄ±yor...")
    
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    # Her servis iÃ§in port check yap
    acik_servisler = {}
    for servis_adi, port in Ayarlar.PORTLAR.items():
        if servis_adi in servis_esleme:
            print(f"[*] {servis_adi.upper()} port {port} kontrol ediliyor...")
            
            # Port check yap
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((hedef_ip, port))
                sock.close()
                
                if result == 0:
                    print(f"[+] {servis_adi.upper()} port {port} aÃ§Ä±k")
                    acik_servisler[servis_adi] = port
                else:
                    print(f"[-] {servis_adi.upper()} port {port} kapalÄ± - atlanÄ±yor")
            except Exception as e:
                print(f"[!] {servis_adi.upper()} port {port} kontrol hatasÄ±: {str(e)}")
                continue
    
    if not acik_servisler:
        print("[-] HiÃ§bir servis portu aÃ§Ä±k deÄŸil!")
        return
    
    print(f"\n[+] AÃ§Ä±k servisler: {', '.join(acik_servisler.keys()).upper()}")
    
    # SaldÄ±rÄ±larÄ± baÅŸlat
    for servis_adi, port in acik_servisler.items():
        try:
            print(f"\n[+] {servis_adi.upper()} servisi deneniyor...")
            saldiri = servis_esleme[servis_adi](hedef_ip, port)
            saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
        except Exception as e:
            print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
            continue

def belirli_servise_saldiri(hedef_ip, servis_adi, raporlayici):
    """Belirli bir servise saldÄ±rÄ±"""
    if servis_adi not in Ayarlar.PORTLAR:
        print(f"[!] {servis_adi} servisi desteklenmiyor!")
        return
    
    port = Ayarlar.PORTLAR[servis_adi]
    print(f"[*] {servis_adi.upper()} port {port} kontrol ediliyor...")
    
    # Port check yap
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(3)
        result = sock.connect_ex((hedef_ip, port))
        sock.close()
        
        if result == 0:
            print(f"[+] {servis_adi.upper()} port {port} aÃ§Ä±k")
        else:
            print(f"[-] {servis_adi.upper()} port {port} kapalÄ± - saldÄ±rÄ± yapÄ±lamÄ±yor")
            return
    except Exception as e:
        print(f"[!] {servis_adi.upper()} port {port} kontrol hatasÄ±: {str(e)}")
        return
    
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    if servis_adi in servis_esleme:
        try:
            print(f"[+] {servis_adi.upper()} saldÄ±rÄ±sÄ± baÅŸlatÄ±lÄ±yor...")
            saldiri = servis_esleme[servis_adi](hedef_ip, port)
            saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
        except Exception as e:
            print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")

def parametrik_komut_isle(hedef_ip, parametreler):
    """Parametrik komut satÄ±rÄ± giriÅŸini iÅŸler"""
    print(f"[+] Hedef: {hedef_ip}")
    print(f"[+] Parametreler: {' '.join(parametreler)}")
    
    # Parametreleri analiz et
    servisler = []
    hydra_parametreleri = {}
    nmap_yapilacak = False
    servisler_explicit = False  # -s ile servis belirtildi mi?
    tum_servisler = False       # -h ile tÃ¼m servisler mi istendi?
    
    i = 0
    while i < len(parametreler):
        param = parametreler[i]
        
        # Servis seÃ§imi (-s)
        if param == "-s" and i + 1 < len(parametreler):
            servis = parametreler[i + 1].lower()
            if servis in Ayarlar.PORTLAR:
                servisler.append(servis)
                servisler_explicit = True
            else:
                print(f"[!] Bilinmeyen servis: {servis}")
            i += 2
            
        # TÃ¼m servisler (-h)
        elif param == "-h":
            servisler = list(Ayarlar.PORTLAR.keys())
            tum_servisler = True
            i += 1
            
        # Nmap taramasÄ± (-nmap)
        elif param == "-nmap":
            nmap_yapilacak = True
            print(f"[+] Nmap taramasÄ± baÅŸlatÄ±lÄ±yor...")
            raporlayici = Raporlayici()
            nmap_tarama_ve_saldiri(hedef_ip, raporlayici)
            return
            
        # Hydra parametreleri
        elif param in ["-L", "-P", "-l", "-p", "-t", "-W", "-s", "-o", "-b", "-R", "-F", "-C", "-M", "-m"]:
            if i + 1 < len(parametreler):
                hydra_parametreleri[param] = parametreler[i + 1]
                print(f"[+] Hydra parametresi: {param} {parametreler[i + 1]}")
                i += 2
            else:
                print(f"[!] {param} parametresi iÃ§in deÄŸer eksik")
                i += 1
                
        # Boolean parametreler
        elif param in ["-V", "-d", "-f", "-R", "-x"]:
            hydra_parametreleri[param] = True
            print(f"[+] Hydra parametresi: {param}")
            i += 1
            
        # Ã–zel parametreler (-- ile baÅŸlayan)
        elif param.startswith("--"):
            if i + 1 < len(parametreler) and not parametreler[i + 1].startswith("-"):
                hydra_parametreleri[param] = parametreler[i + 1]
                print(f"[+] Ã–zel parametre: {param} {parametreler[i + 1]}")
                i += 2
            else:
                hydra_parametreleri[param] = True
                print(f"[+] Ã–zel parametre: {param}")
                i += 1
                
        # Bilinmeyen parametreler
        else:
            print(f"[!] Bilinmeyen parametre: {param}")
            i += 1
    
    # -s ile servis belirtildiyse ve -h kullanÄ±lmadÄ±ysa port check atlanacak
    skip_port_check = servisler_explicit and not tum_servisler
    
    # EÄŸer servis belirtilmemiÅŸse port check ile tespit et
    if not servisler and not skip_port_check:
        print(f"[+] Port check ile servis tespiti yapÄ±lÄ±yor...")
        port_checker = PortChecker(hedef_ip)
        _ = port_checker.servis_portlarini_tara()
        acik_servisler_pc = port_checker.acik_servisleri_getir()
        servisler = list(acik_servisler_pc.keys())
        
        if not servisler:
            print("[-] AÃ§Ä±k servis bulunamadÄ±!")
            return
    
    print(f"[+] SaldÄ±rÄ±lacak servisler: {', '.join(servisler).upper()}")
    
    acik_servisler = {}
    if skip_port_check:
        # Port check YAPMA, doÄŸrudan servis listesi ile devam et
        for servis_adi in servisler:
            acik_servisler[servis_adi] = Ayarlar.PORTLAR[servis_adi]
    else:
        # Her servis iÃ§in port check yap
        for servis_adi in servisler:
            port = Ayarlar.PORTLAR[servis_adi]
            print(f"[*] {servis_adi.upper()} port {port} kontrol ediliyor...")
            
            # Port check yap
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(3)
                result = sock.connect_ex((hedef_ip, port))
                sock.close()
                
                if result == 0:
                    print(f"[+] {servis_adi.upper()} port {port} aÃ§Ä±k")
                    acik_servisler[servis_adi] = port
                else:
                    print(f"[-] {servis_adi.upper()} port {port} kapalÄ± - atlanÄ±yor")
            except Exception as e:
                print(f"[!] {servis_adi.upper()} port {port} kontrol hatasÄ±: {str(e)}")
                continue
    
    if not acik_servisler:
        print("[-] HiÃ§bir servis portu aÃ§Ä±k deÄŸil!")
        return
    
    # Servis sÄ±nÄ±flarÄ± eÅŸleme (desteklenen servisler)
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }

    # -h modunda: Ã¶nce desteklenenlerin tamamÄ±nÄ±, sonra bu hedefte saldÄ±rÄ±labilecekleri listele
    if tum_servisler:
        desteklenen = list(servis_esleme.keys())
        print(f"\n[+] Bu araÃ§ toplam {len(desteklenen)} servisi destekliyor:")
        print("    " + ", ".join(s.upper() for s in desteklenen))
        print(f"[+] Bu hedefte brute force yapÄ±labilecek servisler ({len(acik_servisler)}):")
        for s, p in acik_servisler.items():
            print(f"    - {s.upper()} (port {p})")
        print("[+] BaÅŸlatÄ±lÄ±yor...\n")
    else:
        if not skip_port_check:
            print(f"\n[+] AÃ§Ä±k servisler: {', '.join(acik_servisler.keys()).upper()}")
    
    # VarsayÄ±lan deÄŸerler
    kullanici_listesi = hydra_parametreleri.get('-L', Ayarlar.KULLANICI_ADI_LISTESI)
    sifre_listesi = hydra_parametreleri.get('-P', Ayarlar.PAROLA_LISTESI)
    
    # SaldÄ±rÄ±larÄ± baÅŸlat
    raporlayici = Raporlayici()
    for servis_adi, port in acik_servisler.items():
        if servis_adi in servis_esleme:
            try:
                print(f"\n[+] {servis_adi.upper()} saldÄ±rÄ±sÄ± baÅŸlatÄ±lÄ±yor...")
                saldiri = servis_esleme[servis_adi](hedef_ip, port)
                
                # Hydra parametrelerini uygula
                for param, value in hydra_parametreleri.items():
                    if param == '-t':
                        saldiri.thread_sayisi = int(value)
                    elif param == '-W':
                        saldiri.timeout = int(value)
                    elif param == '-L':
                        saldiri.kullanici_listesi = value
                    elif param == '-P':
                        saldiri.sifre_listesi = value
                    elif param == '-l':
                        saldiri.tek_kullanici = value
                    elif param == '-p':
                        saldiri.tek_sifre = value
                    elif param == '-s':
                        saldiri.port = int(value)
                    elif param == '-V':
                        saldiri.verbose = True
                    elif param == '-d':
                        saldiri.debug = True
                    elif param == '-f':
                        saldiri.first_found = True
                    elif param == '-R':
                        saldiri.restore = True
                    elif param == '-o':
                        saldiri.output_file = value
                    elif param == '-b':
                        saldiri.log_file = value
                    elif param == '-x':
                        saldiri.xml_output = True
                    elif param == '-F':
                        saldiri.form_params = value
                    elif param == '-C':
                        saldiri.custom_params = value
                    elif param == '-M':
                        saldiri.module_path = value
                    elif param == '-m':
                        saldiri.service_name = value
                
                saldiri.saldir(kullanici_listesi, sifre_listesi)
            except Exception as e:
                print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                continue


def main():
    # Dizinleri oluÅŸtur
    for dir in ["wordlists", "reports", "sonuclar"]:
        os.makedirs(dir, exist_ok=True)
    
    # ArgÃ¼man yoksa gereksinimleri gÃ¶ster (banner yok)
    if len(sys.argv) == 1:
        print("KullanÄ±m: python main.py [parametreler] <host>")
        print("Ã–rnekler:")
        print("  python main.py -h 192.168.1.1")
        print("  python main.py -s ssh -t 8 192.168.1.1")
        print("  python main.py -nmap 192.168.1.1")
        print("YardÄ±m: --help")
        return
    
    # YardÄ±m bayraklarÄ±
    if any(arg in ("--help", "-?", "help") for arg in sys.argv[1:]):
        yazdir_yardim()
        return
    
    tokens = sys.argv[1:]

    # Bayraklardan sonra deÄŸer bekleyen parametreler
    flags_with_values = {"-s", "-L", "-P", "-l", "-p", "-t", "-W", "-o", "-b", "-F", "-C", "-M", "-m"}

    # TÃ¼m tokenlarÄ± tarayarak hangi indekslerin deÄŸer olarak tÃ¼ketildiÄŸini iÅŸaretle
    consumed_value_indexes = set()
    i = 0
    while i < len(tokens):
        tok = tokens[i]
        if tok in flags_with_values and (i + 1) < len(tokens):
            consumed_value_indexes.add(i + 1)
            i += 2
        else:
            i += 1

    # Host olarak kabul edilecek aday: sondan ilk, '-' ile baÅŸlamayan ve deÄŸer olarak tÃ¼ketilmemiÅŸ token
    host_index = None
    for idx in range(len(tokens) - 1, -1, -1):
        if not tokens[idx].startswith('-') and idx not in consumed_value_indexes:
            host_index = idx
            break

    if host_index is None:
        print("[!] Host eksik. Bir host belirtiniz. Ã–rnek: python main.py -h 192.168.1.1")
        return

    hedef_ip = tokens[host_index]

    # Parametreler: host hariÃ§ kalan tokenlar
    parametreler = tokens[:host_index] + tokens[host_index+1:]

    # Sadece host verilmiÅŸse
    if len(parametreler) == 0:
        print("[!] Parametre eksik. Bir parametre belirtiniz. Ã–rnek: -h veya -s ssh")
        return

    # EÄŸer tek parametre -h ise: -h <ip> -> tÃ¼m servisler (port check ile listele ve saldÄ±r)
    if len(parametreler) == 1 and parametreler[0] == '-h':
        print("[+] TÃ¼m servisler listeleniyor (aÃ§Ä±k olanlara saldÄ±rÄ±lacak)...")
        parametrik_komut_isle(hedef_ip, ['-h'])
        return

    # EÄŸer -nmap belirtilmiÅŸse
    if '-nmap' in parametreler:
        parametrik_komut_isle(hedef_ip, ['-nmap'])
        return

    # EÄŸer -s belirtilmiÅŸse: port check olmadan doÄŸrudan ilgili servise saldÄ±r
    if '-s' in parametreler:
        parametrik_komut_isle(hedef_ip, parametreler)
        return

    # DiÄŸer tÃ¼m durumlar: mevcut parametrik iÅŸleyici
    parametrik_komut_isle(hedef_ip, parametreler)

if __name__ == "__main__":
    main()